======
Router
======

The :py:class:`wishbone.router.Default` router is used to initialize the
modules and to organize the event stream between them.

Modules are registered using
:py:func:`wishbone.router.Default.initializeModule`. The router takes care of
the proper startup :py:func:`wishbone.router.Default.start` and shutdown
:py:func:`wishbone.router.Default.stop` sequence of all the modules.

Queues are connected to each other using
:py:func:`wishbone.router.Default.connect`.  Queues can only have a "1 to 1"
relationship.  If you require a "1 to N" or similar scenario you might have to
use one of the builtin flow modules.

The router also takes care of the logs and metrics produced by the modules.
The :py:class:`wishbone.router.Default` router automatically connects the
*metrics* and *logs* queues of each module to a
:py:class:`wishbone.module.Funnel` module which can optionally be connected to
another module for further handling.


Logging
=======

Modules produce logs using :py:class:`wishbone.logging` which submits to the
**logs**. The router automatically initializes a
:py:`wishbone.module.Funnel` (called **metrics_funnel**) module to which the
log queue of each registered module is connected to.  It is up to the  user to
decide which other module(s) to connect to the *outbox* of the
*metrics_funnel* module instance.


Metrics
=======

Modules producs metrics which are submitted into its **metrics** queue.
The

Modules produce 2 kinds of metrics:

    -   Queue related metrics which are generated by
        :py:func:`wishbone.tools.WishboneQueue.stats`.

    -   Function related metrics can optionally be generated by decorating a
        function with :py:func:`wishbone.tools.Measure.runTime`


The router instance is responsible for grabbing the metrics at the
:py:data:`wishbone.router.Default.interval`.  The gathered metrics are stored
in the router's metrics queue from which they can be consume by the module
which has been registered using
:py:func:`wishbone.router.Default.registerMetricModule`

Typically the :py:class:`wishbone.module.Graphite` is registered as
metricmodule, which formats the metrics into a Graphite format.  That module
can be connected on its turn to the TCP client module in order to forward the
metric data to Graphite.

.. image:: graphite.png

Format
------
Wishbone represents metrics into a fixed data structure:

    (time, type, source, name, value, unit, (tag1, tag2))

It is a tuple containing a number of fields:

- timestamp
  A timestamp of the metric in unix time.

- type
  A free to choose description of the type of the metric

- source
  The originating source of the metric

- name
  The name of the metric

- value
  The metric value

- unit
  The value units

- tags
  A tuple of tags

For example:

        (1381002603.726132, 'wishbone', 'hostname', 'queue.outbox.in_rate', 0, '', ("production",monitored))

---------

.. autoclass:: wishbone.router.Default
    :members:

---------

.. .. autoclass:: wishbone.tools.Measure
..     :members: runTime